/* After you float the height of the element you floated bcomes zero and the next element becomes very close or tightly nitted
to the floated element.. this is the case cos when you float all of the child element of the floated element are floated so
the height collapses, you fix this by using the clearfix hack  */
/* what the clearfix does is to append a pseudo element after the element which will then clear the float, i think the clearfic
property is on the parent, just a thought */
/* don't confuse this with the base font size in the html elelment, we are onl
using this cos 1.6rem is appearing in multiple places */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* basic reset */
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* every element should inherit the box sizing */ }

/* rem is calculated in realtion to the root font size */
html {
  font-size: 62.5%;
  /* root font size */ }

/* all of these will be inherited */
body {
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /*  just a hack: prevents the animation from shaking at the end
  the backface visibility actually determines if the back part of an element when we transform it is visible or
  hidden for the user.  */
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    /* block level element occupies the entire width that they have available and they creates line breaks after and before them */
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /*read doc: https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function */
    /* 
    animation-delay: 3s; 
    animation-iteration-count: 3;
    */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  /* the baclground get cipped exactly the place where the text sits, so the background 
  show, but we can make it show by making the text transaprent */
  color: transparent;
  /* make the text transparent so the clipped background can show */
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

/* to center this button, it is an inline block so it is treated as if it is a text so set the text align property of 
the parent to center, the parent in this case is the class text-box */
/* inline-block will allow the box model to work on an inline element as if they were block level element */
.btn {
  /* adds a virtual element after the element that we are selecting */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    /* always do this if u want 2 give some padding, or height or width 2 some element(I think inline element) */
    border-radius: 10rem;
    transition: all .2s;
    /* the transition property is on the initial state i.e .btn:link */
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: '';
    display: inline-block;
    /* content and display property are required for it to work */
    height: 100%;
    /* pseudo element is a child of it element e.g the pseudo element is a child of .btn so the height or  */
    width: 100%;
    /* is relative to the parent, i.e the width for instance is 100% of .btn */
    border-radius: 10rem;
    position: absolute;
    /* puts the pseudo element on top of our actual button */
    top: 0;
    left: 0;
    z-index: -1;
    /* specifies the position of an element if they are on top one another */
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  /* do this so we can use th ebox model property on it , like padding , margin, etc */
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    /* always define the width of images in peecentages, like that it will nicely scale with the view port */
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    /* like a base z-index */
    transition: all .2s;
    outline-offset: 2rem;
    /* gives space between the outline */ }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform 0.3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: .5rem;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    /* the baclground get cipped exactly the place where the text sits, so the background 
    show, but we can make it show by making the text transaprent */
    color: transparent;
    /* make the text transparent so the clipped background can show */ }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.row {
  max-width: 114rem;
  /* max-width means that if we have enough available space then it will have the width that we specify
  but if there is not enough width, basically if the viewport is smaller than the width that we specifed(114rems) then it will
  simply fill 100% of the available spce */
  margin: 0 auto;
  /* trick to center block element inside of another block element */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row:after {
    content: "";
    display: table;
    /* we use table cos it is the way it works for clearfix */
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2);
    /* the hastag&curly braces cos the calc requires it for calculation in sass */
    float: left; }
    .row .col-1-of-2:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2* 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }

/*
note: to specify graident we always use the background image property
we want the gradient to be on top so it has to be the first attribute that we specify b4 the image
*/
.header {
  height: 95vh;
  /*means height of the element should be 95% of the view pirt height*/
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /* always tries to fit the image inside the element viewport or box  */
  background-position: top;
  /* it ensures d top of d image stays at d top of d container&remain d same no matter how d view port changes */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative; }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    /* the direction will be relative to the parent element that has a position set to relative..in this case.. */
    left: 4rem;
    /*..d parent element is d header element wit d header class, so dis is d reference 4rm which top,left starts to count*/ }
  .header__logo {
    height: 3.5rem;
    /*set d height&d width will be figured out by d browser or set d width&d height will b firgured out by d browser */ }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* this 50% are now no longer in relation to the parent element but of(multiply) the element itself */
    text-align: center; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  background-size: cover;
  transform: skewY(-7deg);
  margin-top: -10rem; }
  .section-features > * {
    /* select everythjing that is a direct child of the dection-features */
    transform: skewY(7deg); }

/* there are two forms of animation, the easy one is transition and the other one is the keyframe properties */
/* After you float the height of the element you floated bcomes zero and the next element becomes very close or tightly nitted
to the floated element.. this is the case cos when you float all of the child element of the floated element are floated so
the height collapses, you fix this by using the clearfix hack  */
